// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  passwordHash String
  role       Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  surveys   Survey[]
  responses Response[]
}

model Survey {
  id          String   @id @default(cuid())
  title       String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  authorId    String
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  questions   Question[]
  responses   Response[]
}

model Question {
  id       String   @id @default(cuid())
  text     String
  type     QuestionType
  required Boolean  @default(false)
  order    Int
  
  // Relations
  surveyId String
  survey   Survey     @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  options  Option[]
  answers  Answer[]
}

model Option {
  id         String @id @default(cuid())
  text       String
  order      Int
  
  // Relations
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers    Answer[]
}

model Response {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Relations
  surveyId  String
  survey    Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  answers   Answer[]
}

model Answer {
  id         String @id @default(cuid())
  textAnswer String?
  
  // Relations
  responseId String
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  optionId   String?
  option     Option?  @relation(fields: [optionId], references: [id], onDelete: SetNull)
}

enum QuestionType {
  TEXT
  MULTIPLE_CHOICE
  CHECKBOX
  RATING
}

// -------------------------------------------------
// User & Auth related enums
// -------------------------------------------------

enum Role {
  ADMIN
  USER
}

// Customer Management Models
model Customer {
  id               String   @id @default(cuid())
  companyName      String
  street           String
  postalCode       String
  city             String
  status           CustomerStatus @default(ACTIVE)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Primary Contact
  primaryContactFirstName String
  primaryContactLastName  String
  primaryContactRole      String?
  primaryContactEmail     String
  primaryContactPhone     String?
  
  // Relations
  additionalContacts      ContactPerson[]
  assignedSurveys        CustomerSurvey[]
}

model ContactPerson {
  id         String  @id @default(cuid())
  firstName  String
  lastName   String
  role       String?
  department String?
  email      String
  phone      String?
  isActive   Boolean @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model CustomerSurvey {
  id           String   @id @default(cuid())
  templateId   String   // Original Tally form ID
  tallyFormId  String?  // Individual copy form ID
  title        String
  description  String?
  status       SurveyStatus @default(ACTIVE)
  assignedAt   DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  customerId   String
  customer     Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  assignedTo   SurveyAssignment[]
}

model SurveyAssignment {
  id               String @id @default(cuid())
  contactPersonId  String
  
  // Relations
  customerSurveyId String
  customerSurvey   CustomerSurvey @relation(fields: [customerSurveyId], references: [id], onDelete: Cascade)
  
  @@unique([customerSurveyId, contactPersonId])
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
}

enum SurveyStatus {
  ACTIVE
  INACTIVE
  COMPLETED
}

// API Credentials per user (encrypted)
model ApiCredential {
  id           String   @id @default(cuid())
  userEmail    String   @unique

  // Encrypted Tally API key components
  tallyCipher  String?
  tallyIv      String?
  tallyTag     String?

  // Encrypted OpenAI API key components
  openaiCipher String?
  openaiIv     String?
  openaiTag    String?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// ---------------------------------------------
// Form storage (generic, for Tally/local forms)
// ---------------------------------------------

model FormDefinition {
  id          String   @id @default(cuid())
  sourceId    String?  // external provider id (e.g., Tally ID)
  title       String
  description String?
  status      String   @default("draft")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  fields      FormField[]
  submissions FormSubmission[]

  @@index([sourceId])
}

model FormField {
  id          String   @id @default(cuid())
  formId      String
  key         String   // stable programmatic key
  label       String
  type        String   // text, email, textarea, radio, checkbox, rating, etc.
  required    Boolean  @default(false)
  order       Int      @default(0)
  options     Json?

  form        FormDefinition @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]

  @@unique([formId, key])
}

model FormSubmission {
  id          String   @id @default(cuid())
  formId      String
  submittedAt DateTime @default(now())
  respondent  String?
  meta        Json?

  form        FormDefinition @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     FormAnswer[]
  analyses    Analysis[]

  @@index([formId])
}

model FormAnswer {
  id           String   @id @default(cuid())
  submissionId String
  fieldId      String
  value        Json     // normalized, keep as JSON to support multiple types/options

  submission   FormSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  field        FormField      @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@index([submissionId])
  @@index([fieldId])
}

model Analysis {
  id            String   @id @default(cuid())
  submissionId  String
  model         String
  result        Json
  createdAt     DateTime @default(now())

  submission    FormSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}
