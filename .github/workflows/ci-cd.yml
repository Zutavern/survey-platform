name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Test and Build Job
  test-and-build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: 🚀 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: 🔍 Run ESLint
        run: npm run lint --if-present
        continue-on-error: true
        
      - name: 🧪 Run tests
        run: npm run test:ci --if-present
        env:
          CI: true
          
      - name: 📊 Run test coverage
        run: npm run test:coverage --if-present
        continue-on-error: true
        
      - name: 🏗️ Build application
        run: npm run build
        env:
          TALLY_API_KEY: ${{ secrets.TALLY_API_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          
      - name: 📋 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files-${{ matrix.node-version }}
          path: .next/
          retention-days: 1

  # Security and Code Quality
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: 🚀 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: 🛡️ Run security audit
        run: npm audit --audit-level moderate
        continue-on-error: true
        
      - name: 🔍 Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          
      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Preview Deployment (for PRs and develop branch)
  deploy-preview:
    runs-on: ubuntu-latest
    needs: [test-and-build]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: 🚀 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: 🔧 Install Vercel CLI
        run: npm install --global vercel@latest
        
      - name: 🔄 Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: 🏗️ Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          TALLY_API_KEY: ${{ secrets.TALLY_API_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          
      - name: 🚀 Deploy to Vercel Preview
        id: deploy-preview
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview-url=$url" >> $GITHUB_OUTPUT
          
      - name: 📝 Comment Preview URL on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('🚀 Preview Deployment')
            );
            
            const commentBody = `## 🚀 Preview Deployment
            
            Your changes have been deployed to Vercel Preview:
            
            🔗 **Preview URL:** ${{ steps.deploy-preview.outputs.preview-url }}
            
            📊 **Build Details:**
            - ✅ Tests passed
            - ✅ Build successful  
            - ✅ Security scan completed
            
            This preview will be updated on every push to this PR.`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

  # Production Deployment (only main branch)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: 🚀 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: 🔧 Install Vercel CLI
        run: npm install --global vercel@latest
        
      - name: 🔄 Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: 🏗️ Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          TALLY_API_KEY: ${{ secrets.TALLY_API_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          
      - name: 🚀 Deploy to Vercel Production
        id: deploy-production
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "production-url=$url" >> $GITHUB_OUTPUT
          
      - name: 🎉 Create deployment success notification
        if: success()
        run: |
          echo "🎉 Successfully deployed to production!"
          echo "🔗 Production URL: ${{ steps.deploy-production.outputs.production-url }}"
          
      - name: 🚨 Notify on deployment failure
        if: failure()
        run: |
          echo "🚨 Production deployment failed!"
          exit 1

  # Performance and Accessibility Tests
  lighthouse-check:
    runs-on: ubuntu-latest
    needs: [deploy-preview]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 🚀 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔍 Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ needs.deploy-preview.outputs.preview-url }}
            ${{ needs.deploy-preview.outputs.preview-url }}/login
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true