#!/usr/bin/env node

/**
 * Setup script f√ºr Neon Development Database
 * 
 * Dieses Script hilft beim Einrichten einer Neon Development-Umgebung
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function setupNeonDev() {
  console.log('üöÄ Neon Development Setup f√ºr Survey Platform\n');
  
  // Check if .env.local already exists
  const envLocalPath = path.join(process.cwd(), '.env.local');
  if (fs.existsSync(envLocalPath)) {
    console.log('‚ö†Ô∏è  .env.local existiert bereits.');
    const overwrite = await question('M√∂chten Sie sie √ºberschreiben? (y/N): ');
    if (overwrite.toLowerCase() !== 'y') {
      console.log('‚ùå Setup abgebrochen.');
      rl.close();
      return;
    }
  }
  
  console.log('üìã Bitte geben Sie Ihre Neon Database Verbindungsdaten ein:\n');
  console.log('Diese finden Sie in der Neon Console unter:');
  console.log('https://console.neon.tech/app/projects/[your-project]/branches\n');
  
  const databaseUrl = await question('Database URL: ');
  
  if (!databaseUrl) {
    console.log('‚ùå Database URL ist erforderlich.');
    rl.close();
    return;
  }
  
  // Validate URL format
  if (!databaseUrl.includes('neon.tech') && !databaseUrl.includes('postgresql://')) {
    console.log('‚ùå Ung√ºltige Database URL Format.');
    rl.close();
    return;
  }
  
  // Generate secure development keys
  const jwtSecret = `dev-jwt-${Math.random().toString(36).substring(2, 15)}-${Date.now()}`;
  const encryptionKey = `dev-encrypt-${Math.random().toString(36).substring(2, 15)}-key!!`;
  
  // Create .env.local content
  const envContent = `# Neon Development Database Configuration
# Generated on ${new Date().toISOString()}

DATABASE_URL="${databaseUrl}"
DIRECT_URL="${databaseUrl}"

# Development JWT & Encryption Keys
JWT_SECRET="${jwtSecret}"
ENCRYPTION_KEY="${encryptionKey}"

# Development API Keys (optional)
TALLY_API_KEY=""
OPENAI_API_KEY=""

NODE_ENV="development"

# Generated by setup-neon-dev.js
# Do not commit this file to version control
`;

  // Write .env.local file
  try {
    fs.writeFileSync(envLocalPath, envContent);
    console.log('\n‚úÖ .env.local erfolgreich erstellt!');
  } catch (error) {
    console.error('‚ùå Fehler beim Erstellen der .env.local:', error.message);
    rl.close();
    return;
  }
  
  console.log('\nüìù N√§chste Schritte:');
  console.log('1. npx prisma generate          # Prisma Client generieren');
  console.log('2. npx prisma db push           # Schema in Neon Database pushen');
  console.log('3. node scripts/create-test-users.js  # Test-User erstellen');
  console.log('4. npm run dev                  # Development Server starten\n');
  
  console.log('üîê Test-Zugangsdaten nach dem Setup:');
  console.log('Admin: admin@admin.com / admin123');
  console.log('User:  user@test.com / test123\n');
  
  console.log('üìö Weitere Informationen siehe NEON_SETUP.md');
  
  rl.close();
}

// Handle errors
process.on('SIGINT', () => {
  console.log('\n‚ùå Setup abgebrochen.');
  rl.close();
  process.exit(0);
});

setupNeonDev().catch(console.error);